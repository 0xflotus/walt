import { assert: Assert, memory: Memory<{ initial: 1 }> } from 'env';
import { getStringIterator: GetIterator, next: NextIterator, reset: ResetIterator } from '../utils/string.walt';
type Assert = (i32, i32, i32) => void;
type StringIterator = {
  length: i32,
  index: i32,
  addr: i32,
  start: i32,
  value: i32,
  done: i32
};
type GetIterator = (i32) => StringIterator;
type NextIterator = (StringIterator) => StringIterator;
type ResetIterator = (StringIterator) => StringIterator;

function countCharacter(ptr: i32, character: i32) : i32 {
  const iterator: StringIterator = getStringIterator(ptr);
  let result: i32 = 0;

  next(iterator);
  while(iterator.done == false) {
    if (iterator.value == character) {
      result += 1;
    }
    next(iterator);
  }

  return result;
}

function indexOf(haystack: i32, needle: i32) : i32 {
  let result: i32 = -1;
  const haystackIterator: StringIterator = getStringIterator(haystack);
  const needleIterator: StringIterator = getStringIterator(needle);

  if (
    haystackIterator.length == 0 ||
    needleIterator.length == 0 ||
    (haystackIterator.length < needleIterator.length)
  ) {
    return result;
  }

  // Get initial values of both iterators
  next(haystackIterator);
  next(needleIterator);

  while (!haystackIterator.done) {
    result = haystackIterator.index - 1;
    // Keep iterating while characters match
    while(haystackIterator.value == needleIterator.value) {
      next(haystackIterator);
      next(needleIterator);
      if (needleIterator.done) {
        return result;
      }
    }

    // Reset needle as we are about to start matching again
    reset(needleIterator);
    next(needleIterator);

    next(haystackIterator);
  }

  return -1;
}

function stringLength(str: String): i32 {
  const iterator: StringIterator = getStringIterator(str);
  return iterator.length;
}

export function run() {
  assert("string iterator, count ASCII", countCharacter("aabbccddaa   aaa", 'a'), 7);
  // This spec miiiight be a bit misleading. The emoji below is two code points
  // but can also be represented with a single code point.
  assert("string iterator, count emojis", countCharacter("aabbðŸ˜‚ðŸ˜‚ðŸ˜‚ aaaðŸ˜‚", 'ðŸ˜‚'), 4);
  assert("string iterator, indexOf ascii", indexOf("quick brown fox", "brown"), 6);
  assert(
    "string iterator, indexOf utf8",
    indexOf('LibertÃ©, Ã©galitÃ©, fraternitÃ© for all utf encodings!', 'Ã©galitÃ©'),
    9
  );
  const text: String = "large string encoding --> We need to test that strings of length of 128+ bytes work. On a plane, so could not post lorem ipsum, this should be of correct length though. Unicode for coverage âˆš";
  assert(text, stringLength(text), 191);
}
